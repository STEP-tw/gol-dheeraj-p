{"version":3,"sources":["_src/gameOfLife.js","_src/lib.js","_src/game_io.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["lib","require","IO","filterOutOfBoundCells","cells","bounds","isWithinBounds","isWithin","bind","topLeft","bottomRight","filter","module","exports","nextGeneration","currGeneration","map","cell","parseInputs","_IO$parseBounds","parseBounds","height","width","world","createWorld","evaluateNextGeneration","row","col","createGrid","Array","fill","undefined","aliveCells","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","aliveCell","value","err","return","cartesianProductOf","firstSet","secondSet","result","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","firstSetElement","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","secondSetElement","push","findNeighbours","grid","neighbourDeltas","slice","addDeltaToCell","cellPosition","delta","countAliveNeighbours","reduce","neighboursCount","currentNeighbour","applyRules","getCellRules","nextGenWorld","length","nextGenCell","state","isGreaterEqualTo","leftOperand","rightOperand","evaluateNthGeneration","currentGeneration","generationCount","nthGeneration","currentWorld","positionToCheck","isRowInBound","isColInBound","userInputs","userInput","generatePrintableGrid","join","reverseParseInputs","parsedInputs","parsedInput","Cell","react_default","a","createElement","this","props","color","x","y","stroke","strokeWidth","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","gen","_this2","timerID","setInterval","tick","setState","colors","i","j","src_Cell","concat","genCells","forEach","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b119942.chunk.js","sourcesContent":["const lib = require('./lib.js');\nconst IO = require('./game_io.js');\n\nconst nextGeneration = function(currGeneration,bounds) {\n  currGeneration = filterOutOfBoundCells(currGeneration, bounds);\n  currGeneration = currGeneration.map((cell) => [cell[0] - bounds.topLeft[0], cell[1] - bounds.topLeft[1]]);\n  currGeneration = IO.parseInputs(currGeneration);\n\n  let {height, width} = IO.parseBounds(bounds);\n  let world = lib.createWorld(currGeneration, height, width);\n  let nextGeneration = lib.evaluateNextGeneration(world);\n\n  return nextGeneration.map((cell) => {\n    return [cell.row + bounds.topLeft[0], cell.col + bounds.topLeft[1]];\n  });\n}\n\nconst filterOutOfBoundCells = function(cells, bounds){\n  let isWithinBounds = lib.isWithin.bind(null, bounds.topLeft, bounds.bottomRight);\n  return cells.filter(isWithinBounds);\n}\nmodule.exports = { nextGeneration };\n","const createGrid = function(height, width){\n  let grid = new Array(height).fill(undefined);\n  return grid.map((cell)=>new Array(width).fill(0));\n}\n\nconst createWorld = function(aliveCells, height, width){\n  let world = createGrid(height, width);\n  for(let aliveCell of aliveCells){\n    world[aliveCell.row][aliveCell.col] = 1;\n  }\n  return world;\n}\n\nconst cartesianProductOf = function(firstSet, secondSet){\n  let result = new Array();\n  for(let firstSetElement of firstSet){\n    for(let secondSetElement of secondSet){\n      result.push([firstSetElement, secondSetElement]);\n    }\n  }\n  return result;\n}\n\nconst findNeighbourDeltas = function(){\n  let rowDeltaSet = [0,1,-1];\n  let columnDeltaSet = [0,1,-1];\n  return cartesianProductOf(rowDeltaSet, columnDeltaSet).slice(1); //slice(1) to remove delta (0,0)\n}\n\nconst addDelta = function(cellPosition, delta){\n  let row = cellPosition.row + delta[0];\n  let col = cellPosition.col + delta[1];\n  return {row, col};\n}\n\nconst findNeighbours = function(row, col, grid){\n  let neighbourDeltas = findNeighbourDeltas();\n  let cellPosition = {row, col};\n  let addDeltaToCell = addDelta.bind(null, cellPosition); \n  let neighbours = neighbourDeltas.map(addDeltaToCell); \n  return neighbours.filter((cell) => {\n    return grid[cell.row] != undefined && grid[cell.row][cell.col] != undefined ;\n  });\n}\n\nconst countAliveNeighbours = function(row, col, grid){\n  let neighbours = findNeighbours(row, col, grid);\n  return neighbours.reduce((neighboursCount, currentNeighbour) => {\n    return neighboursCount + grid[currentNeighbour.row][currentNeighbour.col];\n  },0);\n} \n\nconst getCellRules = function(cell){\n  const aliveCellRules = [0,0,1,1,0,0,0,0,0];\n  const deadCellRules = [0,0,0,1,0,0,0,0,0];\n  const allCellRules = [deadCellRules, aliveCellRules];\n  return allCellRules[cell];\n}\n\nconst applyRules = function(cell, grid){\n  let cellState = grid[cell.row][cell.col];\n  let cellRules = getCellRules(cellState);\n  let aliveNeighboursCount = countAliveNeighbours(cell.row, cell.col, grid);\n  return cellRules[aliveNeighboursCount];\n}\n\nconst getAliveCells = function(world){\n  let aliveCells =  world.filter( cell => cell.state );\n  return aliveCells.map(cell => {\n    return {row: cell.row, col: cell.col};\n  });\n}\n\nconst evaluateNextGeneration = function(grid){\n  let nextGenWorld = new Array();\n  for(let row=0; row<grid.length; row++){\n    for(let col=0; col<grid[row].length; col++){\n      let cell = {row, col};\n      let nextGenCell = applyRules(cell, grid);\n      nextGenWorld.push({row, col, state: nextGenCell});\n    }\n  }\n  return getAliveCells(nextGenWorld);\n}\n\nconst evaluateNthGeneration = function(currentGeneration, generationCount, height, width){\n  let nthGeneration = currentGeneration;\n  while(generationCount){\n    let currentWorld = createWorld(nthGeneration, height, width);\n    nthGeneration = evaluateNextGeneration(currentWorld);\n    generationCount--;\n  }\n  return nthGeneration;\n}\n\nconst isGreaterEqualTo = function(leftOperand, rightOperand){\n  return leftOperand >= rightOperand;\n}\n\nconst isWithin = function(topLeft, bottomRight, positionToCheck){\n  let row = positionToCheck[0];\n  let col = positionToCheck[1];\n  let isRowInBound = isGreaterEqualTo(row,topLeft[0]) && isGreaterEqualTo(bottomRight[0], row); \n  let isColInBound = isGreaterEqualTo(col,topLeft[1]) && isGreaterEqualTo(bottomRight[1],col);\n  return isRowInBound && isColInBound;\n}\n\nexports.createGrid = createGrid;\nexports.createWorld = createWorld;\nexports.findNeighbours = findNeighbours;\nexports.countAliveNeighbours = countAliveNeighbours;\nexports.evaluateNextGeneration = evaluateNextGeneration;\nexports.evaluateNthGeneration = evaluateNthGeneration;\nexports.isWithin = isWithin;\nexports.cartesianProductOf = cartesianProductOf;\n","const parseInputs = function(userInputs){\n  let parsedUserInputs = userInputs.map(userInput => {\n    return {row: userInput[0], col: userInput[1]};\n  });\n  return parsedUserInputs;\n}\n\nconst parseBounds = function(bounds){\n  let height = bounds.bottomRight[0] - bounds.topLeft[0] + 1;\n  let width = bounds.bottomRight[1] - bounds.topLeft[1] + 1;\n  return {height,width};\n}\n\nconst reverseParseInputs = function(parsedInputs){\n  return parsedInputs.map(parsedInput =>{\n    return [parsedInput.row, parsedInput.col];\n  });\n}\n\nconst generatePrintableGrid = function(grid){\n  return grid.map(row => '|' + row.join(\"|\") + '|');\n}\n\nexports.parseInputs = parseInputs;\nexports.generatePrintableGrid = generatePrintableGrid;\nexports.parseBounds = parseBounds;\nexports.reverseParseInputs = reverseParseInputs;\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}